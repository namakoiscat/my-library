/*

Range Sum Query  (Binary Index Tree)
 
問題  https://onlinejudge.u-aizu.ac.jp/problems/DSL_2_B
提出  https://onlinejudge.u-aizu.ac.jp/status/users/kkkkkko2w/submissions/1/DSL_2_B/judge/6867693/C++17

問題  https://atcoder.jp/contests/arc033/tasks/arc033_3
提出  https://atcoder.jp/contests/arc033/submissions/42715232

1-indeexであることに注意!!!!!!!!!
ex)  bit.add(0,43) はだめ！！！！！！！！！！！！！！！！！！！！！
 
出来ること

一点更新               bit.add(i,x) ;
区間の和               bit.sum(l,r) ;
小さい方からｋ番目の値  bit.k_number(k) ;
k番目の値              bit.get(index) ;  (index != 0)

*/
 
class RSQ {
    
    long long n ;
    vector<long long> bit ;
    
public :
    RSQ(long long n_):n(n_),bit(n_+1){}
    
    
    long long SUM(long long i){
        long long s = 0 ;
        while(i){
            s += bit[i] ;
            i-=i&-i ;
        }
        return s ;
    }
    
    long long sum(long long left,long long right){
       long long res = SUM(right) - SUM(left-1) ;
       return res ;
    }
    
    void add(long long i , long long x){
        // 1-indexでやる
        assert(0 < i && i <= n) ;
        while(i <= n){
            bit[i] += x ;
            i+=i&-i ;
        }
    }
 
    long long k_number(long long K){
       long long all = sum(1,n) + 1 ;
       // 1-index でやること。bitにある数字の個数より大きい数はだめ
       assert(0 < K && K < all) ;
       long long left = 0 ;
       long long right = n+1 ;
       
       while(right - left > 1){
            long long mid = (left + right) / 2 ;
            long long sum = 0 ;
            long long x = mid ;
            while(x > 0){
                 sum += bit[x] ;
                 x -= x & -x ;
            }
            if(sum >= K)right = mid ;
            else left = mid ;
       }
       return right ;
    }
    
    long long get(long long index){
       return sum(index,index) ;    
    }
};
 
 
// ----------------------------------------------------
 
// 使用例
/*
 
long long N ,Q ;
cin >> N >> Q ;
 
RSQ bit(N) ;
 
while(Q--){
   long long t,l,r ;
   cin >> t >> l >> r ;
 
   if(t==0){
    bit.add(l,r) ;
   }else{               
   // 累積和みたいにいっこひく
   // 1-indexでやる
   C << bit.sum(l,r) << E
}

}
 
*/
